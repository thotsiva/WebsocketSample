public static Single<List<AgentDetails>> processKeysInBatches(JedisPool jedisPool, String pattern) {
    return Single.create(emitter -> {
        try (Jedis jedis = jedisPool.getResource()) {
            String cursor = ScanParams.SCAN_POINTER_START; // Use SCAN_POINTER_START for the initial cursor
            List<AgentDetails> agentDetailsList = new ArrayList<>();

            // Set up the ScanParams with MATCH for SCAN command
            ScanParams scanParams = new ScanParams().match(pattern).count(1000); // Scan all matching keys

            // Fetch all keys matching the pattern using Redis SCAN command, using functional programming
            List<String> allKeys = Stream.iterate(cursor, c -> !c.equals(ScanParams.SCAN_POINTER_START), c -> {
                    ScanResult<String> result = jedis.scan(c, scanParams);
                    return result.getCursor();
                })
                .map(c -> jedis.scan(c, scanParams))
                .flatMap(scanResult -> scanResult.getResult().stream())
                .collect(Collectors.toList());

            // Process keys in batches using functional programming style
            int batchSize = 200;
            IntStream.range(0, (allKeys.size() + batchSize - 1) / batchSize) // Create a stream for batches
                .mapToObj(batchIndex -> {
                    int start = batchIndex * batchSize;
                    int end = Math.min(start + batchSize, allKeys.size());
                    List<String> batchKeys = allKeys.subList(start, end); // Get the keys for the current batch

                    // Execute the pipeline for current batch
                    Pipeline pipeline = jedis.pipelined();
                    Response<List<String>> response = pipeline.mget(batchKeys.toArray(new String[0]));
                    pipeline.sync(); // Execute pipeline

                    // Process the response, map to AgentDetails and filter
                    return response.get().stream()
                            .filter(Objects::nonNull) // Filter out null values
                            .filter(value -> !value.isEmpty()) // Filter out empty values
                            .map(value -> gson.fromJson(value, AgentDetails.class)) // Map to AgentDetails
                            .filter(agent -> LocalDateTime.parse(agent.getLatestAliveTs(), DateTimeFormatter.ISO_DATE_TIME)
                                    .isAfter(LocalDateTime.now().minusMinutes(1))) // Filter agents that are alive within the last minute
                            .collect(Collectors.toList()); // Collect filtered agents into a list
                })
                .flatMap(List::stream) // Flatten the list of lists
                .forEach(agentDetailsList::add); // Add to the main list

            // Emit the result as a Single
            emitter.onSuccess(agentDetailsList);

        } catch (Exception e) {
            emitter.onError(e); // If there's an error, emit it
        }
    });
}
