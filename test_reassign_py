import uuid
import time
from unittest.mock import patch

from logger.log_manager import LogManager
from opentelemetry.trace import set_span_in_context
from opentelemetry import context as otel_context


def run_validator_steps(parent_ctx, common_kwargs):
    # Explicitly pass parent context while starting the child span
    with LogManager.elf.start_span("Reassign Flow Validator", ctx=parent_ctx) as validator_span:
        validator_ctx = set_span_in_context(validator_span)

        LogManager.info(
            parent_context=validator_ctx,
            **common_kwargs,
            step="Reassign Flow Validator",
            log_message="Reassign flow validator called"
        )

        time.sleep(1)

        LogManager.info(
            parent_context=validator_ctx,
            **common_kwargs,
            step="Reassign Flow Validator",
            log_message="Reassign flow validated successfully"
        )


@patch(target="logger.log_manager.get_env", return_value="default")
@patch("logger.log_manager.get_config")
def test_reassign_flow(mock_get_config, mock_get_env):
    # Mock config data
    mock_get_config.return_value = {
        "pii_fields": []
    }

    LogManager.initialize()

    correlation_id = str(uuid.uuid4())
    common_kwargs = {
        "correlationId": correlation_id,
        "user": "elf_testing",
        "event": "reassignConversationEvent"
    }

    # Start parent span for the flow
    with LogManager.elf.start_span("Reassign Flow") as parent_span:
        parent_ctx = set_span_in_context(parent_span)

        LogManager.info(
            parent_context=parent_ctx,
            **common_kwargs,
            step="Reassign Flow",
            log_message="Reassign flow started"
        )

        run_validator_steps(parent_ctx, common_kwargs)

        LogManager.info(
            parent_context=parent_ctx,
            **common_kwargs,
            step="Reassign Flow",
            log_message="Reassign flow completed"
        )


if __name__ == "__main__":
    test_reassign_flow()
